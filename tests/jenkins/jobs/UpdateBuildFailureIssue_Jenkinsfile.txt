   UpdateBuildFailureIssue_Jenkinsfile.run()
      UpdateBuildFailureIssue_Jenkinsfile.pipeline(groovy.lang.Closure)
         UpdateBuildFailureIssue_Jenkinsfile.echo(Executing on agent [label:none])
         UpdateBuildFailureIssue_Jenkinsfile.stage(updateBuildFailureIssue, groovy.lang.Closure)
            UpdateBuildFailureIssue_Jenkinsfile.script(groovy.lang.Closure)
               UpdateBuildFailureIssue_Jenkinsfile.updateBuildFailureIssues({inputManifestPath=tests/data/opensearch-2.2.0.yml, distributionBuildNumber=32})
                  updateBuildFailureIssues.readYaml({file=tests/data/opensearch-2.2.0.yml})
                  updateBuildFailureIssues.string({credentialsId=jenkins-health-metrics-account-number, variable=METRICS_HOST_ACCOUNT})
                  updateBuildFailureIssues.string({credentialsId=jenkins-health-metrics-cluster-endpoint, variable=METRICS_HOST_URL})
                  updateBuildFailureIssues.withCredentials([METRICS_HOST_ACCOUNT, METRICS_HOST_URL], groovy.lang.Closure)
                     updateBuildFailureIssues.withAWS({role=OpenSearchJenkinsAccessRole, roleAccount=METRICS_HOST_ACCOUNT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        ComponentBuildStatus.getComponents(passed)
                           OpenSearchMetricsQuery.fetchMetrics({\"_source\":[\"component\"],\"query\":{\"bool\":{\"filter\":[{\"match_phrase\":{\"component_category\":\"OpenSearch\"}},{\"match_phrase\":{\"component_build_result\":\"passed\"}},{\"match_phrase\":{\"version\":\"2.2.0\"}},{\"match_phrase\":{\"distribution_build_number\":\"32\"}},{\"range\":{\"build_start_time\":{\"from\":\"now-6h\",\"to\":\"now\"}}}]}}})
                              updateBuildFailureIssues.println(Running query: {\"_source\":[\"component\"],\"query\":{\"bool\":{\"filter\":[{\"match_phrase\":{\"component_category\":\"OpenSearch\"}},{\"match_phrase\":{\"component_build_result\":\"passed\"}},{\"match_phrase\":{\"version\":\"2.2.0\"}},{\"match_phrase\":{\"distribution_build_number\":\"32\"}},{\"range\":{\"build_start_time\":{\"from\":\"now-6h\",\"to\":\"now\"}}}]}}})
                              updateBuildFailureIssues.sh({script=
            set -e
            set +x
            curl -s -XGET "sample.url/opensearch-distribution-build-results/_search" --aws-sigv4 "aws:amz:us-east-1:es" --user "abc:xyz" -H "x-amz-security-token:sampleToken" -H 'Content-Type: application/json' -d "{\"_source\":[\"component\"],\"query\":{\"bool\":{\"filter\":[{\"match_phrase\":{\"component_category\":\"OpenSearch\"}},{\"match_phrase\":{\"component_build_result\":\"passed\"}},{\"match_phrase\":{\"version\":\"2.2.0\"}},{\"match_phrase\":{\"distribution_build_number\":\"32\"}},{\"range\":{\"build_start_time\":{\"from\":\"now-6h\",\"to\":\"now\"}}}]}}}" | jq '.'
        , returnStdout=true})
                        ComponentBuildStatus.getComponents(failed)
                           OpenSearchMetricsQuery.fetchMetrics({\"_source\":[\"component\"],\"query\":{\"bool\":{\"filter\":[{\"match_phrase\":{\"component_category\":\"OpenSearch\"}},{\"match_phrase\":{\"component_build_result\":\"failed\"}},{\"match_phrase\":{\"version\":\"2.2.0\"}},{\"match_phrase\":{\"distribution_build_number\":\"32\"}},{\"range\":{\"build_start_time\":{\"from\":\"now-6h\",\"to\":\"now\"}}}]}}})
                              updateBuildFailureIssues.println(Running query: {\"_source\":[\"component\"],\"query\":{\"bool\":{\"filter\":[{\"match_phrase\":{\"component_category\":\"OpenSearch\"}},{\"match_phrase\":{\"component_build_result\":\"failed\"}},{\"match_phrase\":{\"version\":\"2.2.0\"}},{\"match_phrase\":{\"distribution_build_number\":\"32\"}},{\"range\":{\"build_start_time\":{\"from\":\"now-6h\",\"to\":\"now\"}}}]}}})
                              updateBuildFailureIssues.sh({script=
            set -e
            set +x
            curl -s -XGET "sample.url/opensearch-distribution-build-results/_search" --aws-sigv4 "aws:amz:us-east-1:es" --user "abc:xyz" -H "x-amz-security-token:sampleToken" -H 'Content-Type: application/json' -d "{\"_source\":[\"component\"],\"query\":{\"bool\":{\"filter\":[{\"match_phrase\":{\"component_category\":\"OpenSearch\"}},{\"match_phrase\":{\"component_build_result\":\"failed\"}},{\"match_phrase\":{\"version\":\"2.2.0\"}},{\"match_phrase\":{\"distribution_build_number\":\"32\"}},{\"range\":{\"build_start_time\":{\"from\":\"now-6h\",\"to\":\"now\"}}}]}}}" | jq '.'
        , returnStdout=true})
                        updateBuildFailureIssues.println(Failed Components: [asynchronous-search, notifications])
                        updateBuildFailureIssues.println(Passed Components: [sql, notifications])
                  updateBuildFailureIssues.createGithubIssue({repoUrl=https://github.com/opensearch-project/notifications.git, issueTitle=[AUTOCUT] Distribution Build Failed for notifications-2.2.0, issueBody=***Build Failed Error***: **notifications failed during the distribution build for version: 2.2.0.**
                    Please see build log at www.example.com/job/build_url/32/display/redirect.
                    The failed build stage will be marked as unstable :warning: . Please see ./build.sh step for more details.
                    Checkout the [wiki](https://github.com/opensearch-project/opensearch-build/wiki/Building-an-OpenSearch-and-OpenSearch-Dashboards-Distribution) to reproduce the failure locally., label=autocut,v2.2.0, issueEdit=true})
                     createGithubIssue.usernamePassword({credentialsId=jenkins-github-bot-token, passwordVariable=GITHUB_TOKEN, usernameVariable=GITHUB_USER})
                     createGithubIssue.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                        createGithubIssue.sh({script=gh issue list --repo https://github.com/opensearch-project/notifications.git -S "[AUTOCUT] Distribution Build Failed for notifications-2.2.0 in:title" --json number --jq '.[0].number', returnStdout=true})
                        createGithubIssue.sh({script=date -d "3 days ago" +'%Y-%m-%d', returnStdout=true})
                        createGithubIssue.sh({script=gh issue list --repo https://github.com/opensearch-project/notifications.git -S "[AUTOCUT] Distribution Build Failed for notifications-2.2.0 in:title is:closed closed:>=bbb
ccc" --json number --jq '.[0].number', returnStdout=true})
                        createGithubIssue.println(Issue already exists, editing the issue body)
                        createGithubIssue.sh({script=gh issue edit bbb
ccc --repo https://github.com/opensearch-project/notifications.git --body "***Build Failed Error***: **notifications failed during the distribution build for version: 2.2.0.**
                    Please see build log at www.example.com/job/build_url/32/display/redirect.
                    The failed build stage will be marked as unstable :warning: . Please see ./build.sh step for more details.
                    Checkout the [wiki](https://github.com/opensearch-project/opensearch-build/wiki/Building-an-OpenSearch-and-OpenSearch-Dashboards-Distribution) to reproduce the failure locally.", returnStdout=true})
                  updateBuildFailureIssues.sleep({time=3, unit=SECONDS})
                  updateBuildFailureIssues.createGithubIssue({repoUrl=https://github.com/opensearch-project/asynchronous-search.git, issueTitle=[AUTOCUT] Distribution Build Failed for asynchronous-search-2.2.0, issueBody=***Build Failed Error***: **asynchronous-search failed during the distribution build for version: 2.2.0.**
                    Please see build log at www.example.com/job/build_url/32/display/redirect.
                    The failed build stage will be marked as unstable :warning: . Please see ./build.sh step for more details.
                    Checkout the [wiki](https://github.com/opensearch-project/opensearch-build/wiki/Building-an-OpenSearch-and-OpenSearch-Dashboards-Distribution) to reproduce the failure locally., label=autocut,v2.2.0, issueEdit=true})
                     createGithubIssue.usernamePassword({credentialsId=jenkins-github-bot-token, passwordVariable=GITHUB_TOKEN, usernameVariable=GITHUB_USER})
                     createGithubIssue.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                        createGithubIssue.sh({script=gh issue list --repo https://github.com/opensearch-project/asynchronous-search.git -S "[AUTOCUT] Distribution Build Failed for asynchronous-search-2.2.0 in:title" --json number --jq '.[0].number', returnStdout=true})
                        createGithubIssue.sh({script=date -d "3 days ago" +'%Y-%m-%d', returnStdout=true})
                        createGithubIssue.sh({script=gh issue list --repo https://github.com/opensearch-project/asynchronous-search.git -S "[AUTOCUT] Distribution Build Failed for asynchronous-search-2.2.0 in:title is:closed closed:>=bbb
ccc" --json number --jq '.[0].number', returnStdout=true})
                        createGithubIssue.println(Issue already exists, editing the issue body)
                        createGithubIssue.sh({script=gh issue edit bbb
ccc --repo https://github.com/opensearch-project/asynchronous-search.git --body "***Build Failed Error***: **asynchronous-search failed during the distribution build for version: 2.2.0.**
                    Please see build log at www.example.com/job/build_url/32/display/redirect.
                    The failed build stage will be marked as unstable :warning: . Please see ./build.sh step for more details.
                    Checkout the [wiki](https://github.com/opensearch-project/opensearch-build/wiki/Building-an-OpenSearch-and-OpenSearch-Dashboards-Distribution) to reproduce the failure locally.", returnStdout=true})
                  updateBuildFailureIssues.sleep({time=3, unit=SECONDS})
                  updateBuildFailureIssues.closeGithubIssue({repoUrl=https://github.com/opensearch-project/sql.git, issueTitle=[AUTOCUT] Distribution Build Failed for sql-2.2.0, closeComment=Closing the issue as the distribution build for sql has passed for version: **2.2.0**.
                    Please see build log at www.example.com/job/build_url/32/display/redirect})
                     closeGithubIssue.usernamePassword({credentialsId=jenkins-github-bot-token, passwordVariable=GITHUB_TOKEN, usernameVariable=GITHUB_USER})
                     closeGithubIssue.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                        closeGithubIssue.sh({script=gh issue list --repo https://github.com/opensearch-project/sql.git -S "[AUTOCUT] Distribution Build Failed for sql-2.2.0 in:title" --json number --jq '.[0].number', returnStdout=true})
                        closeGithubIssue.sh({script=gh issue close bbb
ccc -R opensearch-project/sql --comment "Closing the issue as the distribution build for sql has passed for version: **2.2.0**.
                    Please see build log at www.example.com/job/build_url/32/display/redirect", returnStdout=true})
                  updateBuildFailureIssues.sleep({time=3, unit=SECONDS})
