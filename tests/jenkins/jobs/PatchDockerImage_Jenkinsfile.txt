   PatchDockerImage_Jenkinsfile.run()
      PatchDockerImage_Jenkinsfile.pipeline(groovy.lang.Closure)
         PatchDockerImage_Jenkinsfile.echo(Executing on agent [label:none])
         PatchDockerImage_Jenkinsfile.stage(Patch docker image, groovy.lang.Closure)
            PatchDockerImage_Jenkinsfile.script(groovy.lang.Closure)
               PatchDockerImage_Jenkinsfile.patchDockerImage({product=opensearch, tag=latest, rerelease=true})
                  patchDockerImage.legacySCM(groovy.lang.Closure)
                  patchDockerImage.library({identifier=jenkins@main, retriever=null})
                  patchDockerImage.sh(
    #!/bin/bash
    set -e
    set +x

    docker pull opensearchproject/opensearch:latest
    )
                  patchDockerImage.sh(docker inspect --format '{{ index .Config.Labels "org.label-schema.version"}}' opensearchproject/opensearch:latest > versionnumber)
                  patchDockerImage.sh(docker inspect --format '{{ index .Config.Labels "org.label-schema.build-date"}}' opensearchproject/opensearch:latest > time)
                  patchDockerImage.sh(docker inspect --format '{{ index .Config.Labels "org.label-schema.description"}}' opensearchproject/opensearch:latest > number)
                  patchDockerImage.readFile(versionnumber)
                  patchDockerImage.readFile(time)
                  patchDockerImage.readFile(number)
                  patchDockerImage.readYaml({file=manifests/1.3.0/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  patchDockerImage.echo(Trigger docker-build)
                  patchDockerImage.string({name=DOCKER_BUILD_GIT_REPOSITORY, value=https://github.com/opensearch-project/opensearch-build})
                  patchDockerImage.string({name=DOCKER_BUILD_GIT_REPOSITORY_REFERENCE, value=main})
                  patchDockerImage.string({name=DOCKER_BUILD_SCRIPT_WITH_COMMANDS, value=id && pwd && cd docker/release && curl -sSL https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.3.0/1880/linux/x64/tar/dist/opensearch/opensearch-1.3.0-linux-x64.tar.gz -o opensearch-x64.tgz && curl -sSL https://ci.opensearch.org/ci/dbc/distribution-build-opensearch/1.3.0/1880/linux/arm64/tar/dist/opensearch/opensearch-1.3.0-linux-arm64.tar.gz -o opensearch-arm64.tgz && bash build-image-multi-arch.sh -v 1.3.0 -f ./dockerfiles/opensearch.al2.dockerfile -p opensearch -a 'x64,arm64' -r opensearchstaging/opensearch -t 'opensearch-x64.tgz,opensearch-arm64.tgz' -n 1880})
                  patchDockerImage.build({job=docker-build, parameters=[null, null, null]})
                  patchDockerImage.echo(Trigger docker-copy with tag build date )
                  patchDockerImage.string({name=SOURCE_IMAGE_REGISTRY, value=opensearchstaging})
                  patchDockerImage.string({name=SOURCE_IMAGE, value=opensearch:1.3.0})
                  patchDockerImage.string({name=DESTINATION_IMAGE_REGISTRY, value=opensearchstaging})
                  patchDockerImage.string({name=DESTINATION_IMAGE, value=opensearch:1.3.0.1880.20230619})
                  patchDockerImage.build({job=docker-copy, parameters=[null, null, null, null]})
                  patchDockerImage.echo(Trigger docker-scan for opensearch version 1.3.0)
                  patchDockerImage.string({name=IMAGE_FULL_NAME, value=opensearchstaging/opensearch:1.3.0})
                  patchDockerImage.build({job=docker-scan, parameters=[null]})
                  patchDockerImage.echo(Trigger docker-promote)
                  patchDockerImage.string({name=SOURCE_IMAGES, value=opensearch:1.3.0.1880.20230619})
                  patchDockerImage.string({name=RELEASE_VERSION, value=1.3.0})
                  patchDockerImage.build({job=docker-promote, parameters=[null, null]})
