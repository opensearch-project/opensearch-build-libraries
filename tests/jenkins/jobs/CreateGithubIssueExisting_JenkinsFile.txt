   CreateGithubIssueExisting_JenkinsFile.run()
      CreateGithubIssueExisting_JenkinsFile.pipeline(groovy.lang.Closure)
         CreateGithubIssueExisting_JenkinsFile.echo(Executing on agent [label:none])
         CreateGithubIssueExisting_JenkinsFile.stage(createGithubIssue, groovy.lang.Closure)
            CreateGithubIssueExisting_JenkinsFile.script(groovy.lang.Closure)
               CreateGithubIssueExisting_JenkinsFile.createGithubIssue({repoUrl=https://github.com/opensearch-project/opensearch-build, issueTitle=Test GH issue title, issueBody=Test GH issue body})
                  createGithubIssue.usernamePassword({credentialsId=jenkins-github-bot-token, passwordVariable=GITHUB_TOKEN, usernameVariable=GITHUB_USER})
                  createGithubIssue.withCredentials([[GITHUB_USER, GITHUB_TOKEN]], groovy.lang.Closure)
                     createGithubIssue.sh({script=gh issue list --repo https://github.com/opensearch-project/opensearch-build -S "Test GH issue title in:title" --label autocut, returnStdout=true})
                     createGithubIssue.println(Issue already exists in the repository, skipping.)
