   PublishToPyPiWithDir_Jenkinsfile.run()
      PublishToPyPiWithDir_Jenkinsfile.pipeline(groovy.lang.Closure)
         PublishToPyPiWithDir_Jenkinsfile.echo(Executing on agent [label:none])
         PublishToPyPiWithDir_Jenkinsfile.stage(publishToPyPi, groovy.lang.Closure)
            PublishToPyPiWithDir_Jenkinsfile.script(groovy.lang.Closure)
               PublishToPyPiWithDir_Jenkinsfile.publishToPyPi({credentialId=pypi-token, artifactsPath=test})
                  publishToPyPi.legacySCM(groovy.lang.Closure)
                  publishToPyPi.library({identifier=jenkins@5.11.1, retriever=null})
                  publishToPyPi.signArtifacts({artifactPath=/tmp/workspace/test, sigtype=.asc, platform=linux})
                     signArtifacts.fileExists(/tmp/workspace/sign.sh)
                     signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import -)
                     signArtifacts.usernamePassword({credentialsId=github_bot_token_name, usernameVariable=GITHUB_USER, passwordVariable=GITHUB_TOKEN})
                     signArtifacts.string({credentialsId=jenkins-signer-client-role, variable=SIGNER_CLIENT_ROLE})
                     signArtifacts.string({credentialsId=jenkins-signer-client-external-id, variable=SIGNER_CLIENT_EXTERNAL_ID})
                     signArtifacts.string({credentialsId=jenkins-signer-client-unsigned-bucket, variable=SIGNER_CLIENT_UNSIGNED_BUCKET})
                     signArtifacts.string({credentialsId=jenkins-signer-client-signed-bucket, variable=SIGNER_CLIENT_SIGNED_BUCKET})
                     signArtifacts.withCredentials([[GITHUB_USER, GITHUB_TOKEN], SIGNER_CLIENT_ROLE, SIGNER_CLIENT_EXTERNAL_ID, SIGNER_CLIENT_UNSIGNED_BUCKET, SIGNER_CLIENT_SIGNED_BUCKET], groovy.lang.Closure)
                        signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_CLIENT_ROLE
                   export EXTERNAL_ID=SIGNER_CLIENT_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_CLIENT_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_CLIENT_SIGNED_BUCKET

                   /tmp/workspace/sign.sh /tmp/workspace/test --sigtype .asc --platform linux
               )
                  publishToPyPi.usernamePassword({credentialsId=pypi-token, usernameVariable=TWINE_USERNAME, passwordVariable=TWINE_PASSWORD})
                  publishToPyPi.withCredentials([[TWINE_USERNAME, TWINE_PASSWORD]], groovy.lang.Closure)
                     publishToPyPi.sh(twine upload -r pypi /tmp/workspace/test/*)
