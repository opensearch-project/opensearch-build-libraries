   BuildUploadManifestSHA_Jenkinsfile.run()
      BuildUploadManifestSHA_Jenkinsfile.pipeline(groovy.lang.Closure)
         BuildUploadManifestSHA_Jenkinsfile.echo(Executing on agent [label:none])
         BuildUploadManifestSHA_Jenkinsfile.stage(upload manifest SHA, groovy.lang.Closure)
            BuildUploadManifestSHA_Jenkinsfile.script(groovy.lang.Closure)
               BuildUploadManifestSHA_Jenkinsfile.buildUploadManifestSHA({inputManifest=tests/data/opensearch-1.3.0.yml, platform=linux, architecture=x64})
                  buildUploadManifestSHA.legacySCM(groovy.lang.Closure)
                  buildUploadManifestSHA.library({identifier=jenkins@1.5.3, retriever=null})
                  buildUploadManifestSHA.getManifestSHA({inputManifest=tests/data/opensearch-1.3.0.yml, platform=linux, architecture=x64})
                     getManifestSHA.buildManifest({inputManifest=tests/data/opensearch-1.3.0.yml, platform=linux, architecture=x64, lock=true})
                        buildManifest.sh(./build.sh tests/data/opensearch-1.3.0.yml -p linux -a x64 --lock)
                     getManifestSHA.sha1(tests/data/opensearch-1.3.0.yml.lock)
                     getManifestSHA.echo(Manifest SHA: sha1)
                     getManifestSHA.legacySCM(groovy.lang.Closure)
                     getManifestSHA.library({identifier=jenkins@1.5.3, retriever=null})
                     getManifestSHA.readYaml({file=tests/data/opensearch-1.3.0.yml.lock})
                     InputManifest.asBoolean()
                     InputManifest.getSHAsRoot(get-manifest-sha-build)
                     getManifestSHA.echo(Manifest lock: tests/data/opensearch-1.3.0.yml.lock)
                     getManifestSHA.echo(Manifest SHA path: get-manifest-sha-build/1.3.0/shas/sha1.yml)
                     getManifestSHA.string({credentialsId=jenkins-aws-account-public, variable=AWS_ACCOUNT_PUBLIC})
                     getManifestSHA.string({credentialsId=jenkins-artifact-bucket-name, variable=ARTIFACT_BUCKET_NAME})
                     getManifestSHA.withCredentials([AWS_ACCOUNT_PUBLIC, ARTIFACT_BUCKET_NAME], groovy.lang.Closure)
                        getManifestSHA.withAWS({role=opensearch-bundle, roleAccount=AWS_ACCOUNT_PUBLIC, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                           getManifestSHA.s3DoesObjectExist({bucket=ARTIFACT_BUCKET_NAME, path=get-manifest-sha-build/1.3.0/shas/sha1.yml})
                     getManifestSHA.echo(Manifest SHA exists: false)
                  buildUploadManifestSHA.string({credentialsId=jenkins-artifact-bucket-name, variable=ARTIFACT_BUCKET_NAME})
                  buildUploadManifestSHA.string({credentialsId=jenkins-aws-account-public, variable=AWS_ACCOUNT_PUBLIC})
                  buildUploadManifestSHA.withCredentials([ARTIFACT_BUCKET_NAME, AWS_ACCOUNT_PUBLIC], groovy.lang.Closure)
                     buildUploadManifestSHA.withAWS({role=opensearch-bundle, roleAccount=AWS_ACCOUNT_PUBLIC, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        buildUploadManifestSHA.s3Upload({bucket=ARTIFACT_BUCKET_NAME, file=tests/data/opensearch-1.3.0.yml.lock, path=get-manifest-sha-build/1.3.0/shas/sha1.yml})
