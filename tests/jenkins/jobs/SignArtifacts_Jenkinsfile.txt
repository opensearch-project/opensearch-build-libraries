   SignArtifacts_Jenkinsfile.run()
      SignArtifacts_Jenkinsfile.pipeline(groovy.lang.Closure)
         SignArtifacts_Jenkinsfile.echo(Executing on agent [label:none])
         SignArtifacts_Jenkinsfile.stage(sign, groovy.lang.Closure)
            SignArtifacts_Jenkinsfile.script(groovy.lang.Closure)
               SignArtifacts_Jenkinsfile.signArtifacts({artifactPath=/tmp/workspace/artifacts, sigtype=.sig, platform=linux})
                  signArtifacts.fileExists(/tmp/workspace/sign.sh)
                  signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import - && curl -sSL https://artifacts.opensearch.org/publickeys/opensearch-release.pgp | gpg --import -)
                  signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_CLIENT_ROLE, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-role}, {envVar=SIGNER_CLIENT_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-external-id}, {envVar=SIGNER_CLIENT_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-unsigned-bucket}, {envVar=SIGNER_CLIENT_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-signed-bucket}]}, groovy.lang.Closure)
                     signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_CLIENT_ROLE
                   export EXTERNAL_ID=SIGNER_CLIENT_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_CLIENT_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_CLIENT_SIGNED_BUCKET

                   /tmp/workspace/sign.sh /tmp/workspace/artifacts --sigtype .sig --platform linux
               )
               SignArtifacts_Jenkinsfile.signArtifacts({artifactPath=/tmp/workspace/artifacts, sigtype=.sig, platform=linux, email=opensearch@amazon.com})
                  signArtifacts.fileExists(/tmp/workspace/sign.sh)
                  signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import - && curl -sSL https://artifacts.opensearch.org/publickeys/opensearch-release.pgp | gpg --import -)
                  signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_CLIENT_ROLE, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-role}, {envVar=SIGNER_CLIENT_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-external-id}, {envVar=SIGNER_CLIENT_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-unsigned-bucket}, {envVar=SIGNER_CLIENT_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-signed-bucket}]}, groovy.lang.Closure)
                     signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_CLIENT_ROLE
                   export EXTERNAL_ID=SIGNER_CLIENT_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_CLIENT_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_CLIENT_SIGNED_BUCKET

                   /tmp/workspace/sign.sh /tmp/workspace/artifacts --sigtype .sig --platform linux --email opensearch@amazon.com
               )
               SignArtifacts_Jenkinsfile.signArtifacts({artifactPath=/tmp/workspace/artifacts, sigtype=.rpm, platform=linux, overwrite=false})
                  signArtifacts.withSecrets({secrets=[{envVar=RPM_SIGNING_ACCOUNT_NUMBER, secretRef=op://opensearch-infra-secrets/rpm-signing/jenkins-rpm-signing-account-number}, {envVar=RPM_RELEASE_SIGNING_PASSPHRASE_SECRETS_ARN, secretRef=op://opensearch-infra-secrets/rpm-signing/jenkins-rpm-release-signing-passphrase-secrets-arn}, {envVar=RPM_RELEASE_SIGNING_SECRET_KEY_ID_SECRETS_ARN, secretRef=op://opensearch-infra-secrets/rpm-signing/jenkins-rpm-release-signing-secret-key-secrets-arn}, {envVar=RPM_RELEASE_SIGNING_KEY_ID, secretRef=op://opensearch-infra-secrets/rpm-signing/jenkins-rpm-release-signing-key-id}, {envVar=RPM_SIGNING_PASSPHRASE_SECRETS_ARN, secretRef=op://opensearch-infra-secrets/rpm-signing/jenkins-rpm-signing-passphrase-secrets-arn}, {envVar=RPM_SIGNING_SECRET_KEY_ID_SECRETS_ARN, secretRef=op://opensearch-infra-secrets/rpm-signing/jenkins-rpm-signing-secret-key-secrets-arn}, {envVar=RPM_SIGNING_KEY_ID, secretRef=op://opensearch-infra-secrets/rpm-signing/jenkins-rpm-signing-key-id}]}, groovy.lang.Closure)
                     signArtifacts.echo(RPM Add Sign for email release@opensearch.org)
                     signArtifacts.withAWS({role=jenkins-prod-rpm-signing-assume-role, roleAccount=RPM_SIGNING_ACCOUNT_NUMBER, duration=900, roleSessionName=jenkins-signing-session}, groovy.lang.Closure)
                        signArtifacts.sh(#!/bin/bash
                        set -e
                        set +x

                        ARTIFACT_PATH="/tmp/workspace/artifacts"

                        echo "------------------------------------------------------------------------"
                        echo "Check Utility Versions"
                        gpg_version_requirement="2.2.0"
                        rpm_version_requirement="4.13.0" # https://bugzilla.redhat.com/show_bug.cgi?id=227632

                        gpg_version_check=`gpg --version | head -n 1 | grep -oE '[0-9.]+'`
                        gpg_version_check_final=`echo $gpg_version_check $gpg_version_requirement | tr ' ' '
' | sort -V | head -n 1`
                        rpm_version_check=`rpm --version | head -n 1 | grep -oE '[0-9.]+'`
                        rpm_version_check_final=`echo $rpm_version_check $rpm_version_requirement | tr ' ' '
' | sort -V | head -n 1`

                        echo -e "gpg_version_requirement gpg_version_check"
                        echo -e "$gpg_version_requirement $gpg_version_check"
                        echo -e "rpm_version_requirement rpm_version_check"
                        echo -e "$rpm_version_requirement $rpm_version_check"

                        if [[ $gpg_version_requirement = $gpg_version_check_final ]] && [[ $rpm_version_requirement = $rpm_version_check_final ]]; then
                            echo "Utility version is equal or greater than set limit, continue."
                        else
                            echo "Utility version is lower than set limit, exit 1"
                            exit 1
                        fi

                        export GPG_TTY=`tty`

                        PASSPHRASE_SECRETS_ARN="RPM_RELEASE_SIGNING_PASSPHRASE_SECRETS_ARN"
                        SECRET_KEY_ID_SECRETS_ARN="RPM_RELEASE_SIGNING_SECRET_KEY_ID_SECRETS_ARN"
                        KEY_ID="RPM_RELEASE_SIGNING_KEY_ID"
                        KEY_NAME="OpenSearch Project"

                        if [ "release@opensearch.org" = "opensearch@amazon.com" ]; then
                            PASSPHRASE_SECRETS_ARN="RPM_SIGNING_PASSPHRASE_SECRETS_ARN"
                            SECRET_KEY_ID_SECRETS_ARN="RPM_SIGNING_SECRET_KEY_ID_SECRETS_ARN"
                            KEY_ID="RPM_SIGNING_KEY_ID"
                            KEY_NAME="OpenSearch project"
                        fi

                        echo "------------------------------------------------------------------------"
                        echo "Setup RPM Macros"
                        cp -v scripts/pkg/sign_templates/rpmmacros ~/.rpmmacros
                        sed -i "s/##key_name##/${KEY_NAME}/g;s/##passphrase_name##/passphrase/g" ~/.rpmmacros
                        cat ~/.rpmmacros

                        echo "------------------------------------------------------------------------"
                        echo "Import OpenSearch keys"
                        aws secretsmanager get-secret-value --region us-west-2 --secret-id "$PASSPHRASE_SECRETS_ARN" | jq -r .SecretBinary | base64 --decode > passphrase
                        aws secretsmanager get-secret-value --region us-west-2 --secret-id "$SECRET_KEY_ID_SECRETS_ARN" | jq -r .SecretBinary | base64 --decode | gpg --quiet --import --pinentry-mode loopback --passphrase-file passphrase -

                        echo "------------------------------------------------------------------------"
                        echo "Start Signing Rpm"

                        if file $ARTIFACT_PATH | grep -q directory; then

                            echo "Sign directory"
                            for rpm_file in `ls $ARTIFACT_PATH`; do
                                if file $ARTIFACT_PATH/$rpm_file | grep -q RPM; then
                                    rpm --addsign $ARTIFACT_PATH/$rpm_file
                                    rpm -qip $ARTIFACT_PATH/$rpm_file | grep Signature
                                fi
                            done

                        elif file $ARTIFACT_PATH | grep -q RPM; then
                            echo "Sign single rpm"
                            rpm --addsign $ARTIFACT_PATH
                            rpm -qip $ARTIFACT_PATH | grep Signature

                        else
                            echo "This is neither a directory nor a RPM pkg, exit 1"
                            exit 1
                        fi

                        echo "------------------------------------------------------------------------"
                        echo "Clean up gpg"
                        gpg --batch --yes --delete-secret-keys $KEY_ID
                        gpg --batch --yes --delete-keys $KEY_ID
                        rm -v passphrase

                    )
               SignArtifacts_Jenkinsfile.signArtifacts({artifactPath=/tmp/workspace/file.yml, platform=linux, type=maven})
                  signArtifacts.fileExists(/tmp/workspace/sign.sh)
                  signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import - && curl -sSL https://artifacts.opensearch.org/publickeys/opensearch-release.pgp | gpg --import -)
                  signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_CLIENT_ROLE, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-role}, {envVar=SIGNER_CLIENT_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-external-id}, {envVar=SIGNER_CLIENT_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-unsigned-bucket}, {envVar=SIGNER_CLIENT_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-signed-bucket}]}, groovy.lang.Closure)
                     signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_CLIENT_ROLE
                   export EXTERNAL_ID=SIGNER_CLIENT_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_CLIENT_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_CLIENT_SIGNED_BUCKET

                   /tmp/workspace/sign.sh /tmp/workspace/file.yml --platform linux --type maven
               )
               SignArtifacts_Jenkinsfile.signArtifacts({artifactPath=/tmp/workspace/the_msi.msi, platform=windows, overwrite=true})
                  signArtifacts.fileExists(/tmp/workspace/sign.sh)
                  signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_WINDOWS_ROLE, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-role}, {envVar=SIGNER_WINDOWS_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-external-id}, {envVar=SIGNER_WINDOWS_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-unsigned-bucket}, {envVar=SIGNER_WINDOWS_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-signed-bucket}, {envVar=SIGNER_WINDOWS_PROFILE_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-profile-identifier}, {envVar=SIGNER_WINDOWS_PLATFORM_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-platform-identifier}]}, groovy.lang.Closure)
                     signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_WINDOWS_ROLE
                   export EXTERNAL_ID=SIGNER_WINDOWS_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_WINDOWS_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_WINDOWS_SIGNED_BUCKET
                   export PROFILE_IDENTIFIER=SIGNER_WINDOWS_PROFILE_IDENTIFIER
                   export PLATFORM_IDENTIFIER=SIGNER_WINDOWS_PLATFORM_IDENTIFIER

                   /tmp/workspace/sign.sh /tmp/workspace/the_msi.msi --platform windows --overwrite 
               )
               SignArtifacts_Jenkinsfile.signArtifacts({artifactPath=/tmp/workspace/the_pkg.pkg, platform=mac, overwrite=true})
                  signArtifacts.fileExists(/tmp/workspace/sign.sh)
                  signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_MAC_ROLE, secretRef=op://opensearch-infra-secrets/mac-signing/jenkins-signer-mac-role}, {envVar=SIGNER_MAC_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/mac-signing/jenkins-signer-mac-external-id}, {envVar=SIGNER_MAC_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/mac-signing/jenkins-signer-mac-unsigned-bucket}, {envVar=SIGNER_MAC_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/mac-signing/jenkins-signer-mac-signed-bucket}]}, groovy.lang.Closure)
                     signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_MAC_ROLE
                   export EXTERNAL_ID=SIGNER_MAC_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_MAC_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_MAC_SIGNED_BUCKET
                   /tmp/workspace/sign.sh /tmp/workspace/the_pkg.pkg --platform mac --overwrite 
               )
               SignArtifacts_Jenkinsfile.signArtifacts({artifactPath=/tmp/workspace/the_jar.jar, platform=jar_signer, overwrite=true})
                  signArtifacts.fileExists(/tmp/workspace/sign.sh)
                  signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=JAR_SIGNER_ROLE, secretRef=op://opensearch-infra-secrets/jar-signing/jenkins-jar-signer-role}, {envVar=JAR_SIGNER_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/jar-signing/jenkins-jar-signer-external-id}, {envVar=JAR_SIGNER_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/jar-signing/jenkins-jar-signer-unsigned-bucket}, {envVar=JAR_SIGNER_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/jar-signing/jenkins-jar-signer-signed-bucket}]}, groovy.lang.Closure)
                     signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=JAR_SIGNER_ROLE
                   export EXTERNAL_ID=JAR_SIGNER_EXTERNAL_ID
                   export UNSIGNED_BUCKET=JAR_SIGNER_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=JAR_SIGNER_SIGNED_BUCKET
                   /tmp/workspace/sign.sh /tmp/workspace/the_jar.jar --platform jar_signer --overwrite 
               )
