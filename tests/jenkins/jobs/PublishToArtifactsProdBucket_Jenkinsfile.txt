   PublishToArtifactsProdBucket_Jenkinsfile.run()
      PublishToArtifactsProdBucket_Jenkinsfile.pipeline(groovy.lang.Closure)
         PublishToArtifactsProdBucket_Jenkinsfile.echo(Executing on agent [label:none])
         PublishToArtifactsProdBucket_Jenkinsfile.stage(publishToartifactsDotOrg, groovy.lang.Closure)
            PublishToArtifactsProdBucket_Jenkinsfile.script(groovy.lang.Closure)
               PublishToArtifactsProdBucket_Jenkinsfile.publishToArtifactsProdBucket({assumedRoleName=test-role, source=the-windows-msi.msi, destination=msi/, signingPlatform=windows, sigOverwrite=true})
                  publishToArtifactsProdBucket.legacySCM(groovy.lang.Closure)
                  publishToArtifactsProdBucket.library({identifier=jenkins@11.1.0, retriever=null})
                  publishToArtifactsProdBucket.signArtifacts({artifactPath=the-windows-msi.msi, platform=windows, overwrite=true})
                     signArtifacts.fileExists(/tmp/workspace/sign.sh)
                     signArtifacts.dir(opensearch-build, groovy.lang.Closure)
                        signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_WINDOWS_ROLE, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-role}, {envVar=SIGNER_WINDOWS_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-external-id}, {envVar=SIGNER_WINDOWS_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-unsigned-bucket}, {envVar=SIGNER_WINDOWS_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-signed-bucket}, {envVar=SIGNER_WINDOWS_PROFILE_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-profile-identifier}, {envVar=SIGNER_WINDOWS_PLATFORM_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-platform-identifier}]}, groovy.lang.Closure)
                        signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_WINDOWS_ROLE
                   export EXTERNAL_ID=SIGNER_WINDOWS_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_WINDOWS_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_WINDOWS_SIGNED_BUCKET
                   export PROFILE_IDENTIFIER=SIGNER_WINDOWS_PROFILE_IDENTIFIER
                   export PLATFORM_IDENTIFIER=SIGNER_WINDOWS_PLATFORM_IDENTIFIER

                   /tmp/workspace/opensearch-build/sign.sh the-windows-msi.msi --platform windows --overwrite 
               )
                  publishToArtifactsProdBucket.withSecrets({secrets=[{envVar=AWS_ACCOUNT_ARTIFACT, secretRef=op://opensearch-infra-secrets/aws-accounts/jenkins-aws-production-account}, {envVar=ARTIFACT_PRODUCTION_BUCKET_NAME, secretRef=op://opensearch-infra-secrets/aws-resource-arns/jenkins-artifact-production-bucket-name}]}, groovy.lang.Closure)
                     publishToArtifactsProdBucket.withAWS({role=test-role, roleAccount=AWS_ACCOUNT_ARTIFACT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        publishToArtifactsProdBucket.s3Upload({file=the-windows-msi.msi, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=msi/})
               PublishToArtifactsProdBucket_Jenkinsfile.publishToArtifactsProdBucket({assumedRoleName=test-role-2, source=reporting-cli-2.3.0.tg.gz, destination=reporting-cli/})
                  publishToArtifactsProdBucket.legacySCM(groovy.lang.Closure)
                  publishToArtifactsProdBucket.library({identifier=jenkins@11.1.0, retriever=null})
                  publishToArtifactsProdBucket.signArtifacts({artifactPath=reporting-cli-2.3.0.tg.gz, platform=linux, sigtype=.sig, overwrite=false})
                     signArtifacts.fileExists(/tmp/workspace/sign.sh)
                     signArtifacts.dir(opensearch-build, groovy.lang.Closure)
                        signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import - && curl -sSL https://artifacts.opensearch.org/publickeys/opensearch-release.pgp | gpg --import -)
                     signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_CLIENT_ROLE, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-role}, {envVar=SIGNER_CLIENT_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-external-id}, {envVar=SIGNER_CLIENT_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-unsigned-bucket}, {envVar=SIGNER_CLIENT_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/client-signing/jenkins-signer-client-signed-bucket}]}, groovy.lang.Closure)
                        signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_CLIENT_ROLE
                   export EXTERNAL_ID=SIGNER_CLIENT_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_CLIENT_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_CLIENT_SIGNED_BUCKET

                   /tmp/workspace/opensearch-build/sign.sh reporting-cli-2.3.0.tg.gz --platform linux --sigtype .sig
               )
                  publishToArtifactsProdBucket.withSecrets({secrets=[{envVar=AWS_ACCOUNT_ARTIFACT, secretRef=op://opensearch-infra-secrets/aws-accounts/jenkins-aws-production-account}, {envVar=ARTIFACT_PRODUCTION_BUCKET_NAME, secretRef=op://opensearch-infra-secrets/aws-resource-arns/jenkins-artifact-production-bucket-name}]}, groovy.lang.Closure)
                     publishToArtifactsProdBucket.withAWS({role=test-role-2, roleAccount=AWS_ACCOUNT_ARTIFACT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        publishToArtifactsProdBucket.s3Upload({file=reporting-cli-2.3.0.tg.gz, bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=reporting-cli/})
