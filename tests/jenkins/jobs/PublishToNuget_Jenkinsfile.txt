   PublishToNuget_Jenkinsfile.run()
      PublishToNuget_Jenkinsfile.pipeline(groovy.lang.Closure)
         PublishToNuget_Jenkinsfile.echo(Executing on agent [label:none])
         PublishToNuget_Jenkinsfile.stage(publishToNuget, groovy.lang.Closure)
            PublishToNuget_Jenkinsfile.script(groovy.lang.Closure)
               PublishToNuget_Jenkinsfile.publishToNuget({repository=https://github.com/opensearch-project/opensearch-net, tag=1.2.0, apiKeyCredentialId=net-api-key, solutionFilePath=test-solution-file.sln})
                  publishToNuget.legacySCM(groovy.lang.Closure)
                  publishToNuget.library({identifier=jenkins@11.1.3, retriever=null})
                  publishToNuget.checkout({$class=GitSCM, branches=[{name=1.2.0}], userRemoteConfigs=[{url=https://github.com/opensearch-project/opensearch-net}]})
                  publishToNuget.sh(
    dotnet build /tmp/workspace/test-solution-file.sln --configuration Release
    find src/OpenSearch.*/bin/Release/*/*.dll -type f -regextype posix-extended -regex "src/([^/]+)/bin/Release/[^/]+/\1\.dll">/tmp/workspace/dlls.txt
    )
                  publishToNuget.readFile({file=/tmp/workspace/dlls.txt})
                  publishToNuget.signArtifacts({artifactPath=/tmp/workspace/one.dll, platform=windows, overwrite=true})
                     signArtifacts.fileExists(/tmp/workspace/sign.sh)
                     signArtifacts.dir(opensearch-build, groovy.lang.Closure)
                        signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_WINDOWS_ROLE, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-role}, {envVar=SIGNER_WINDOWS_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-external-id}, {envVar=SIGNER_WINDOWS_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-unsigned-bucket}, {envVar=SIGNER_WINDOWS_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-signed-bucket}, {envVar=SIGNER_WINDOWS_PROFILE_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-profile-identifier}, {envVar=SIGNER_WINDOWS_PLATFORM_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-platform-identifier}]}, groovy.lang.Closure)
                        signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_WINDOWS_ROLE
                   export EXTERNAL_ID=SIGNER_WINDOWS_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_WINDOWS_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_WINDOWS_SIGNED_BUCKET
                   export PROFILE_IDENTIFIER=SIGNER_WINDOWS_PROFILE_IDENTIFIER
                   export PLATFORM_IDENTIFIER=SIGNER_WINDOWS_PLATFORM_IDENTIFIER

                   /tmp/workspace/opensearch-build/sign.sh /tmp/workspace/one.dll --platform windows --overwrite 
               )
                  publishToNuget.signArtifacts({artifactPath=/tmp/workspace/two.dll, platform=windows, overwrite=true})
                     signArtifacts.fileExists(/tmp/workspace/sign.sh)
                     signArtifacts.dir(opensearch-build, groovy.lang.Closure)
                        signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_WINDOWS_ROLE, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-role}, {envVar=SIGNER_WINDOWS_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-external-id}, {envVar=SIGNER_WINDOWS_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-unsigned-bucket}, {envVar=SIGNER_WINDOWS_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-signed-bucket}, {envVar=SIGNER_WINDOWS_PROFILE_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-profile-identifier}, {envVar=SIGNER_WINDOWS_PLATFORM_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-platform-identifier}]}, groovy.lang.Closure)
                        signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_WINDOWS_ROLE
                   export EXTERNAL_ID=SIGNER_WINDOWS_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_WINDOWS_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_WINDOWS_SIGNED_BUCKET
                   export PROFILE_IDENTIFIER=SIGNER_WINDOWS_PROFILE_IDENTIFIER
                   export PLATFORM_IDENTIFIER=SIGNER_WINDOWS_PLATFORM_IDENTIFIER

                   /tmp/workspace/opensearch-build/sign.sh /tmp/workspace/two.dll --platform windows --overwrite 
               )
                  publishToNuget.signArtifacts({artifactPath=/tmp/workspace/three.dll, platform=windows, overwrite=true})
                     signArtifacts.fileExists(/tmp/workspace/sign.sh)
                     signArtifacts.dir(opensearch-build, groovy.lang.Closure)
                        signArtifacts.git({url=https://github.com/opensearch-project/opensearch-build.git, branch=main})
                     signArtifacts.withSecrets({secrets=[{envVar=GITHUB_USER, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-username}, {envVar=GITHUB_TOKEN, secretRef=op://opensearch-infra-secrets/github-bot/ci-bot-token}, {envVar=SIGNER_WINDOWS_ROLE, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-role}, {envVar=SIGNER_WINDOWS_EXTERNAL_ID, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-external-id}, {envVar=SIGNER_WINDOWS_UNSIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-unsigned-bucket}, {envVar=SIGNER_WINDOWS_SIGNED_BUCKET, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-signed-bucket}, {envVar=SIGNER_WINDOWS_PROFILE_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-profile-identifier}, {envVar=SIGNER_WINDOWS_PLATFORM_IDENTIFIER, secretRef=op://opensearch-infra-secrets/windows-signing/jenkins-signer-windows-platform-identifier}]}, groovy.lang.Closure)
                        signArtifacts.sh(#!/bin/bash
                   set +x
                   export ROLE=SIGNER_WINDOWS_ROLE
                   export EXTERNAL_ID=SIGNER_WINDOWS_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_WINDOWS_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_WINDOWS_SIGNED_BUCKET
                   export PROFILE_IDENTIFIER=SIGNER_WINDOWS_PROFILE_IDENTIFIER
                   export PLATFORM_IDENTIFIER=SIGNER_WINDOWS_PLATFORM_IDENTIFIER

                   /tmp/workspace/opensearch-build/sign.sh /tmp/workspace/three.dll --platform windows --overwrite 
               )
                  publishToNuget.sh(
        dotnet pack /tmp/workspace/test-solution-file.sln --configuration Release --no-build
        find src -name OpenSearch*.nupkg > /tmp/workspace/nupkg.txt
    )
                  publishToNuget.withSecrets({secrets=[{envVar=API_KEY, secretRef=op://opensearch-infra-secrets/nuget/net-api-key}]}, groovy.lang.Closure)
                     publishToNuget.readFile({file=/tmp/workspace/nupkg.txt})
                     publishToNuget.sh(dotnet nuget push /tmp/workspace/src/net/one.nupkg --api-key API_KEY --source https://api.nuget.org/v3/index.json)
                     publishToNuget.sh(dotnet nuget push /tmp/workspace/src/net/two.nupkg --api-key API_KEY --source https://api.nuget.org/v3/index.json)
                     publishToNuget.sh(dotnet nuget push /tmp/workspace/src/net/three.nupkg --api-key API_KEY --source https://api.nuget.org/v3/index.json)
