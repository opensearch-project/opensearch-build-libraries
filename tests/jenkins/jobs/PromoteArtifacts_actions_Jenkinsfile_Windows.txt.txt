   PromoteArtifacts_actions_Jenkinsfile.run()
      PromoteArtifacts_actions_Jenkinsfile.pipeline(groovy.lang.Closure)
         PromoteArtifacts_actions_Jenkinsfile.echo(Executing on agent [label:none])
         PromoteArtifacts_actions_Jenkinsfile.stage(promote, groovy.lang.Closure)
            PromoteArtifacts_actions_Jenkinsfile.script(groovy.lang.Closure)
               PromoteArtifacts_actions_Jenkinsfile.createSha512Checksums()
               PromoteArtifacts_actions_Jenkinsfile.createSignatureFiles()
                  createSignatureFiles.legacySCM(groovy.lang.Closure)
                  createSignatureFiles.library({identifier=jenkins@4.4.0, retriever=null})
               PromoteArtifacts_actions_Jenkinsfile.promoteArtifacts({manifest=tests/data/opensearch-1.3.0.yml, fileActions=[groovy.lang.Closure, groovy.lang.Closure]})
                  promoteArtifacts.legacySCM(groovy.lang.Closure)
                  promoteArtifacts.library({identifier=jenkins@4.4.0, retriever=null})
                  promoteArtifacts.readYaml({file=tests/data/opensearch-1.3.0.yml})
                  InputManifest.asBoolean()
                  promoteArtifacts.string({credentialsId=jenkins-aws-account-public, variable=AWS_ACCOUNT_PUBLIC})
                  promoteArtifacts.string({credentialsId=jenkins-artifact-bucket-name, variable=ARTIFACT_BUCKET_NAME})
                  promoteArtifacts.string({credentialsId=jenkins-artifact-promotion-role, variable=ARTIFACT_PROMOTION_ROLE_NAME})
                  promoteArtifacts.string({credentialsId=jenkins-aws-production-account, variable=AWS_ACCOUNT_ARTIFACT})
                  promoteArtifacts.string({credentialsId=jenkins-artifact-production-bucket-name, variable=ARTIFACT_PRODUCTION_BUCKET_NAME})
                  promoteArtifacts.withCredentials([AWS_ACCOUNT_PUBLIC, ARTIFACT_BUCKET_NAME, ARTIFACT_PROMOTION_ROLE_NAME, AWS_ACCOUNT_ARTIFACT, ARTIFACT_PRODUCTION_BUCKET_NAME], groovy.lang.Closure)
                     promoteArtifacts.println(zip start promoting)
                     promoteArtifacts.println(S3 download windows x64 zip 1.3.0 from vars-build build number 33 artifacts before creating signatures)
                     promoteArtifacts.withAWS({role=opensearch-bundle, roleAccount=AWS_ACCOUNT_PUBLIC, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        promoteArtifacts.s3Download({bucket=ARTIFACT_BUCKET_NAME, file=tests/jenkins/artifacts/zip, path=vars-build/1.3.0/33/windows/x64/zip/, force=true})
                     promoteArtifacts.readYaml({file=tests/jenkins/artifacts/zip/vars-build/1.3.0/33/windows/x64/zip/builds/opensearch/manifest.yml})
                     promoteArtifacts.fileExists(tests/jenkins/artifacts/zip/vars-build/1.3.0/33/windows/x64/zip/builds/opensearch/core-plugins)
                     promoteArtifacts.println(Signing Starts)
                     promoteArtifacts.println(Signing Core/Bundle Artifacts)
                     promoteArtifacts.findFiles({glob=**/opensearch-min-1.3.0*.zip*,**/opensearch-1.3.0*.zip*})
                     promoteArtifacts.getPath()
                     createSha512Checksums.sh({script=find tests/jenkins/tests/jenkins/file/found.zip -type f, returnStdout=true})
                     createSha512Checksums.echo(Not generating sha for bbb in tests/jenkins/tests/jenkins/file/found.zip, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                     createSha512Checksums.echo(Not generating sha for ccc in tests/jenkins/tests/jenkins/file/found.zip, doesn't match allowed types [.tar.gz, .zip, .rpm, .deb])
                     promoteArtifacts.findFiles({glob=**/opensearch-min-1.3.0*.zip*,**/opensearch-1.3.0*.zip*})
                     promoteArtifacts.getPath()
                     createSignatureFiles.signArtifacts({sigtype=.sig, artifactPath=tests/jenkins/tests/jenkins/file/found.zip})
                        signArtifacts.echo(PGP or Windows Signature Signing)
                        signArtifacts.fileExists(tests/jenkins/sign.sh)
                        signArtifacts.sh(curl -sSL https://artifacts.opensearch.org/publickeys/opensearch.pgp | gpg --import -)
                        signArtifacts.usernamePassword({credentialsId=github_bot_token_name, usernameVariable=GITHUB_USER, passwordVariable=GITHUB_TOKEN})
                        signArtifacts.string({credentialsId=jenkins-signer-client-role, variable=SIGNER_CLIENT_ROLE})
                        signArtifacts.string({credentialsId=jenkins-signer-client-external-id, variable=SIGNER_CLIENT_EXTERNAL_ID})
                        signArtifacts.string({credentialsId=jenkins-signer-client-unsigned-bucket, variable=SIGNER_CLIENT_UNSIGNED_BUCKET})
                        signArtifacts.string({credentialsId=jenkins-signer-client-signed-bucket, variable=SIGNER_CLIENT_SIGNED_BUCKET})
                        signArtifacts.withCredentials([[GITHUB_USER, GITHUB_TOKEN], SIGNER_CLIENT_ROLE, SIGNER_CLIENT_EXTERNAL_ID, SIGNER_CLIENT_UNSIGNED_BUCKET, SIGNER_CLIENT_SIGNED_BUCKET], groovy.lang.Closure)
                           signArtifacts.sh(
                   #!/bin/bash
                   set +x
                   export ROLE=SIGNER_CLIENT_ROLE
                   export EXTERNAL_ID=SIGNER_CLIENT_EXTERNAL_ID
                   export UNSIGNED_BUCKET=SIGNER_CLIENT_UNSIGNED_BUCKET
                   export SIGNED_BUCKET=SIGNER_CLIENT_SIGNED_BUCKET

                   tests/jenkins/sign.sh tests/jenkins/tests/jenkins/file/found.zip --sigtype .sig
               )
                     promoteArtifacts.withAWS({role=ARTIFACT_PROMOTION_ROLE_NAME, roleAccount=AWS_ACCOUNT_ARTIFACT, duration=900, roleSessionName=jenkins-session}, groovy.lang.Closure)
                        promoteArtifacts.s3Upload({bucket=ARTIFACT_PRODUCTION_BUCKET_NAME, path=releases/bundle/opensearch/1.3.0/, workingDir=tests/jenkins/artifacts/zip/vars-build/1.3.0/33/windows/x64/zip/dist/opensearch/, includePathPattern=**/opensearch-1.3.0-windows-x64*})
